{"version":3,"sources":["constants/Colors.ts","components/Themed.tsx","screens/Agendamento.tsx","navigation/BottomTabNavigator.tsx","navigation/LinkingConfiguration.ts","navigation/index.tsx","App.tsx","hooks/useCachedResources.ts","hooks/useColorScheme.web.ts","web-build/register-service-worker.js","assets/fonts/SpaceMono-Regular.ttf"],"names":["light","text","background","tint","tabIconDefault","tabIconSelected","dark","useThemeColor","props","colorName","colorFromProps","Colors","View","style","lightColor","darkColor","otherProps","backgroundColor","Agendamento","styles","container","url","width","height","id","className","position","StyleSheet","create","flex","alignItems","justifyContent","title","fontSize","fontWeight","separator","marginVertical","BottomTab","createBottomTabNavigator","BottomTabNavigator","Navigator","initialRouteName","tabBarOptions","activeTintColor","inactiveTintColor","Screen","name","component","AgendamentoNavigator","options","tabBarIcon","color","TabBarIcon","FontAwesome5","size","marginBottom","AgendamentoStack","createStackNavigator","screenOptions","headerStyle","headerTintColor","headerTitleStyle","alignSelf","headerTitle","prefixes","Linking","config","screens","Root","Navigation","colorScheme","NavigationContainer","linking","LinkingConfiguration","theme","DarkTheme","DefaultTheme","RootNavigator","Stack","headerShown","App","React","isLoadingComplete","setLoadingComplete","a","async","SplashScreen","Font","Ionicons","font","require","console","warn","useCachedResources","StatusBar","navigator","window","addEventListener","serviceWorker","register","scope","then","info","catch","error","module","exports"],"mappings":"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","file":"static/js/app.4cb5f7fb.chunk.js","sourcesContent":["const tintColorLight = '#2f95dc';\nconst tintColorDark = '#fff';\n\nexport default {\n  light: {\n    text: '#000',\n    background: '#fff',\n    tint: tintColorLight,\n    tabIconDefault: '#ccc',\n    tabIconSelected: tintColorLight,\n  },\n  dark: {\n    text: '#fff',\n    background: '#000',\n    tint: tintColorDark,\n    tabIconDefault: '#ccc',\n    tabIconSelected: tintColorDark,\n  },\n};\n","import * as React from 'react';\nimport { Text as DefaultText, View as DefaultView } from 'react-native';\n\nimport Colors from '../constants/Colors';\nimport useColorScheme from '../hooks/useColorScheme';\n\nexport function useThemeColor(\n  props: { light?: string; dark?: string },\n  colorName: keyof typeof Colors.light & keyof typeof Colors.dark\n) {\n  const theme = useColorScheme();\n  const colorFromProps = props[theme];\n\n  if (colorFromProps) {\n    return colorFromProps;\n  } else {\n    return Colors[theme][colorName];\n  }\n}\n\ntype ThemeProps = {\n  lightColor?: string;\n  darkColor?: string;\n};\n\nexport type TextProps = ThemeProps & DefaultText['props'];\nexport type ViewProps = ThemeProps & DefaultView['props'];\n\nexport function Text(props: TextProps) {\n  const { style, lightColor, darkColor, ...otherProps } = props;\n  const color = useThemeColor({ light: lightColor, dark: darkColor }, 'text');\n\n  return <DefaultText style={[{ color }, style]} {...otherProps} />;\n}\n\nexport function View(props: ViewProps) {\n  const { style, lightColor, darkColor, ...otherProps } = props;\n  const backgroundColor = useThemeColor({ light: lightColor, dark: darkColor }, 'background');\n\n  return <DefaultView style={[{ backgroundColor }, style]} {...otherProps} />;\n}\n","import * as React from 'react';\nimport { StyleSheet } from 'react-native';\n\nimport { View } from '../components/Themed';\n\nimport Iframe from 'react-iframe'\n\nexport default function Agendamento() {\n  return (\n    <View style={styles.container}>\n      <Iframe\n        url=\"https://agendaigreja.fbrsolutions.com.br\"\n        width=\"100%\"\n        height=\"100%\"\n        id=\"myId\"\n        className=\"myClassname\"\n        position=\"relative\"\n      />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n});\n","import { Ionicons, FontAwesome5 } from '@expo/vector-icons';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport * as React from 'react';\n\nimport Agendamento from '../screens/Agendamento'\nimport { BottomTabParamList, AgendamentoParamList } from '../types';\n\nconst BottomTab = createBottomTabNavigator<BottomTabParamList>();\n\nexport default function BottomTabNavigator() {\n\n\n  return (\n    <BottomTab.Navigator\n      initialRouteName=\"Agendamento\"\n      tabBarOptions={{\n        activeTintColor: '#484129',\n        inactiveTintColor: '#D2CDC5',\n        style: {\n          backgroundColor: '#A49988'\n        }\n      }}>\n      <BottomTab.Screen\n        name=\"Agendamento\"\n        component={AgendamentoNavigator}\n        options={{\n          tabBarIcon: ({ color }) => <TabBarIcon name=\"church\" color={color} />,\n        }}\n      />\n\n    </BottomTab.Navigator>\n  );\n}\n\n// You can explore the built-in icon families and icons on the web at:\n// https://icons.expo.fyi/\nfunction TabBarIcon(props: { name: string; color: string }) {\n  return <FontAwesome5 size={30} style={{ marginBottom: -3 }} {...props} />;\n}\n\n// Each tab has its own navigation stack, you can read more about this pattern here:\n// https://reactnavigation.org/docs/tab-based-navigation#a-stack-navigator-for-each-tab\nconst AgendamentoStack = createStackNavigator<AgendamentoParamList>();\n\nfunction AgendamentoNavigator() {\n  return (\n    <AgendamentoStack.Navigator\n      screenOptions={{\n        headerStyle: {\n          backgroundColor: '#A49988',\n        },\n        headerTintColor: '#fff',\n        headerTitleStyle: {\n          fontWeight: 'bold',\n          color: '#484129',\n          alignSelf: 'center'\n        },\n      }}\n    >\n      <AgendamentoStack.Screen\n        name=\"AgendamentoScreen\"\n        component={Agendamento}\n        options={{ headerTitle: 'ArqRio - Agendamento de Missas Online' }}\n      />\n    </AgendamentoStack.Navigator>\n  );\n}\n","import * as Linking from 'expo-linking';\n\nexport default {\n  prefixes: [Linking.makeUrl('/')],\n  config: {\n    screens: {\n      Root: {\n        screens: {\n          Agendamento: {\n            screens: {\n              Agendamento: 'agendamento',\n            },\n          },\n        },\n      },\n    },\n  },\n};\n","import { NavigationContainer, DefaultTheme, DarkTheme } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport * as React from 'react';\nimport { ColorSchemeName } from 'react-native';\n\nimport { RootStackParamList } from '../types';\nimport BottomTabNavigator from './BottomTabNavigator';\nimport LinkingConfiguration from './LinkingConfiguration';\n\n// If you are not familiar with React Navigation, we recommend going through the\n// \"Fundamentals\" guide: https://reactnavigation.org/docs/getting-started\nexport default function Navigation({ colorScheme }: { colorScheme: ColorSchemeName }) {\n  return (\n    <NavigationContainer\n      linking={LinkingConfiguration}\n      theme={colorScheme === 'dark' ? DarkTheme : DefaultTheme}>\n      <RootNavigator />\n    </NavigationContainer>\n  );\n}\n\n// A root stack navigator is often used for displaying modals on top of all other content\n// Read more here: https://reactnavigation.org/docs/modal\nconst Stack = createStackNavigator<RootStackParamList>();\n\nfunction RootNavigator() {\n  return (\n    <Stack.Navigator screenOptions={{ headerShown: false }}>\n      <Stack.Screen name=\"Root\" component={BottomTabNavigator} />\n    </Stack.Navigator>\n  );\n}\n","import { StatusBar } from 'expo-status-bar';\nimport React from 'react';\nimport { SafeAreaProvider } from 'react-native-safe-area-context';\n\nimport useCachedResources from './hooks/useCachedResources';\nimport useColorScheme from './hooks/useColorScheme';\nimport Navigation from './navigation';\n\nexport default function App() {\n  const isLoadingComplete = useCachedResources();\n  const colorScheme = useColorScheme();\n\n  if (!isLoadingComplete) {\n    return null;\n  } else {\n    return (\n      <SafeAreaProvider>\n        <Navigation colorScheme={colorScheme} />\n        <StatusBar />\n      </SafeAreaProvider>\n    );\n  }\n}\n","import { Ionicons } from '@expo/vector-icons';\nimport * as Font from 'expo-font';\nimport * as SplashScreen from 'expo-splash-screen';\nimport * as React from 'react';\n\nexport default function useCachedResources() {\n  const [isLoadingComplete, setLoadingComplete] = React.useState(false);\n\n  // Load any resources or data that we need prior to rendering the app\n  React.useEffect(() => {\n    async function loadResourcesAndDataAsync() {\n      try {\n        SplashScreen.preventAutoHideAsync();\n\n        // Load fonts\n        await Font.loadAsync({\n          ...Ionicons.font,\n          'space-mono': require('../assets/fonts/SpaceMono-Regular.ttf'),\n        });\n      } catch (e) {\n        // We might want to provide this error information to an error reporting service\n        console.warn(e);\n      } finally {\n        setLoadingComplete(true);\n        SplashScreen.hideAsync();\n      }\n    }\n\n    loadResourcesAndDataAsync();\n  }, []);\n\n  return isLoadingComplete;\n}\n","// useColorScheme from react-native does not support web currently. You can replace\n// this with react-native-appearance if you would like theme support on web.\nexport default function useColorScheme() {\n  return 'light';\n}","/* eslint-env browser */\n\nif ('serviceWorker' in navigator) {\n  window.addEventListener('load', function () {\n    navigator.serviceWorker\n      .register('/expo-service-worker.js', { scope: '/' })\n      .then(function (info) {\n        // console.info('Registered service-worker', info);\n      })\n      .catch(function (error) {\n        console.info('Failed to register service-worker', error);\n      });\n  });\n}\n","module.exports = __webpack_public_path__ + \"./fonts/SpaceMono-Regular.ttf\";"],"sourceRoot":""}